"""
Port Forwarding Tool
Developer: Ronald Baker
Company: Mavericks Umbrella LLC

Disclaimer:
This software is provided by Mavericks Umbrella LLC "as-is" and without any warranties or conditions,
express or implied, including but not limited to the implied warranties of merchantability and fitness for a particular purpose.
In no event shall Mavericks Umbrella LLC or its contributors be liable for any direct, indirect, incidental,
special, exemplary, or consequential damages (including but not limited to procurement of substitute goods or services;
loss of use, data, or profits; or business interruption) however caused and on any theory of liability,
whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of
the use of this software, even if advised of the possibility of such damage.

This script forwards traffic from one port to another port or host.

Instructions:
1. Run the script from the terminal.
2. Specify the source port, destination host, and destination port.
3. The script will forward traffic in real-time.

Required Libraries:
- socket (Standard Python library, no installation required)

Usage:
python3 port_forwarding_tool.py
"""

import socket
import threading

def forward_traffic(client_socket, target_host, target_port):
    """
    Forwards traffic between the client and the target.

    :param client_socket: The socket connected to the client.
    :param target_host: The destination host to forward traffic to.
    :param target_port: The destination port to forward traffic to.
    """
    try:
        # Connect to the target host
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as target_socket:
            target_socket.connect((target_host, target_port))

            # Start forwarding traffic
            threading.Thread(target=relay_data, args=(client_socket, target_socket)).start()
            relay_data(target_socket, client_socket)
    except Exception as e:
        print(f"Error forwarding traffic: {e}")
    finally:
        client_socket.close()

def relay_data(source, destination):
    """
    Relays data from the source socket to the destination socket.

    :param source: The source socket.
    :param destination: The destination socket.
    """
    try:
        while True:
            data = source.recv(4096)
            if not data:
                break
            destination.sendall(data)
    except Exception as e:
        print(f"Error relaying data: {e}")

def start_port_forwarding(source_port, target_host, target_port):
    """
    Starts the port forwarding service.

    :param source_port: The port to listen for incoming traffic.
    :param target_host: The destination host to forward traffic to.
    :param target_port: The destination port to forward traffic to.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind(("", source_port))
        server_socket.listen(5)
        print(f"Port forwarding service started on port {source_port}. Forwarding to {target_host}:{target_port}.")

        while True:
            client_socket, addr = server_socket.accept()
            print(f"Connection received from {addr}")
            threading.Thread(target=forward_traffic, args=(client_socket, target_host, target_port)).start()

if __name__ == "__main__":
    print("Welcome to the Port Forwarding Tool.")
    print("Developer: Ronald Baker")
    print("Company: Mavericks Umbrella LLC\n")

    # Input forwarding details
    try:
        source_port = int(input("Enter the source port to listen on (e.g., 8080): ").strip())
        target_host = input("Enter the destination host (e.g., 127.0.0.1): ").strip()
        target_port = int(input("Enter the destination port (e.g., 80): ").strip())

        start_port_forwarding(source_port, target_host, target_port)
    except ValueError:
        print("Invalid input. Please enter valid port numbers.")
    except Exception as e:
        print(f"An error occurred: {e}")

