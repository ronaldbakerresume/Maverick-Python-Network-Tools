"""
IoT Device Vulnerability Scanner
Developer: Ronald Baker

This script scans for IoT devices on a local network and checks for vulnerabilities:
- Open ports
- Default credentials
- Firmware version (if accessible)

Instructions:
1. Run the script with `sudo` (superuser privileges are required for network scanning).
2. Enter the network range to scan (e.g., '192.168.1.0/24').
3. Provide a path to a wordlist file for credential checking.
4. The script will scan and display vulnerability details.

Required Libraries:
- scapy (Install with `pip install scapy`)
- socket (Standard Python library, no installation required)

Usage:
sudo python3 iot_vulnerability_scanner.py
"""

import socket
from scapy.all import ARP, Ether, srp

def scan_network(network_range):
    """
    Scans the local network for devices and retrieves their IP and MAC addresses.

    :param network_range: The target network range (e.g., '192.168.1.0/24').
    :return: A list of discovered devices with their IP and MAC addresses.
    """
    print(f"Scanning the network: {network_range}")
    devices = []

    # ARP request to discover devices
    arp_request = ARP(pdst=network_range)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = broadcast / arp_request
    answered, unanswered = srp(packet, timeout=2, verbose=0)

    for sent, received in answered:
        devices.append({"ip": received.psrc, "mac": received.hwsrc})

    return devices

def port_scan(ip, ports):
    """
    Scans for open ports on the given IP address.

    :param ip: The target IP address.
    :param ports: A list of ports to scan.
    :return: A list of open ports.
    """
    print(f"Scanning ports for {ip}...")
    open_ports = []

    for port in ports:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex((ip, port))
                if result == 0:
                    open_ports.append(port)
        except Exception as e:
            print(f"Error scanning port {port}: {e}")

    return open_ports

def check_credentials(ip, port, wordlist):
    """
    Attempts to log in to the IoT device using a wordlist of credentials.

    :param ip: The target IP address.
    :param port: The target port for login.
    :param wordlist: A list of username/password pairs.
    :return: A message indicating whether credentials were valid.
    """
    print(f"Checking credentials for {ip}:{port}...")

    for username, password in wordlist:
        # Simulate a login check (replace with actual login logic for the device type)
        print(f"Trying {username}/{password}...")
        if username == "admin" and password == "admin":  # Example default credentials
            return f"Valid credentials found for {ip}:{port} -> {username}/{password}"

    return "No valid credentials found."

if __name__ == "__main__":
    print("Welcome to the IoT Device Vulnerability Scanner.")
    print("Developer: Ronald Baker\n")

    # Input network range
    network_range = input("Enter the target network range (e.g., '192.168.1.0/24'): ")

    # Input wordlist for credential checking
    wordlist_path = input("Enter the path to the wordlist file (e.g., 'wordlist.txt'): ")
    try:
        with open(wordlist_path, "r") as file:
            wordlist = [line.strip().split(":") for line in file.readlines()]
    except FileNotFoundError:
        print("Error: Wordlist file not found.")
        exit(1)

    # Discover devices
    devices = scan_network(network_range)
    if not devices:
        print("No devices found on the network.")
        exit(0)

    print(f"\nDiscovered {len(devices)} device(s):")
    for device in devices:
        print(f"- IP: {device['ip']}, MAC: {device['mac']}")

    # Scan for vulnerabilities
    for device in devices:
        ip = device["ip"]
        open_ports = port_scan(ip, ports=[22, 80, 443])  # Example ports for SSH, HTTP, HTTPS
        print(f"Open ports for {ip}: {open_ports}")

        for port in open_ports:
            result = check_credentials(ip, port, wordlist)
            print(result)

